File,Function_or_Block,Duplicate_Found_In,Explanation,Recommendation
src/handlers/posts.rs,create_post,src/handlers/admin.rs::create_post,Both functions create a post via state.db_create_post then wrap result into API response with StatusCode::CREATED,Extract generic helper create_entity(handler_specific_builder) or macro to reduce duplication and ensure consistent logging/validation
src/handlers/admin.rs,create_post,src/handlers/posts.rs::create_post,Same as above (symmetric duplication),Unify through shared generic helper/macro and central DTO conversion
src/handlers/admin.rs,delete_post,src/handlers/posts.rs::delete_post,Both delete endpoints call db deletion then return simple status/ApiOk JSON,Introduce generic delete_entity(state, id, db_fn, optional_search_remove) to consolidate logic
src/handlers/posts.rs,delete_post,src/handlers/admin.rs::delete_post,Same deletion pattern duplication,Apply generic delete helper and remove repeated JSON construction
src/handlers/posts.rs,update_post,src/handlers/users.rs::update_user,Both update endpoints parse Path id, call db_update_*, optionally reindex (feature=search), then return ApiOk DTO,Create trait UpdatableEntity { type UpdateReq; fn update(...); fn to_dto(...) } or macro to reduce repeated structure
src/handlers/users.rs,update_user,src/handlers/posts.rs::update_post,Update pattern duplication (symmetric),Refactor via generic update_entity helper capturing search indexing closure
src/handlers/users.rs,delete_user (soft deactivate),src/handlers/posts.rs::delete_post & src/handlers/admin.rs::delete_post,Deletion style endpoint returning success JSON,Generalize soft/hard delete via DeleteStrategy enum and helper
src/handlers/api_keys.rs,create_api_key,src/handlers/posts.rs::create_post & src/handlers/admin.rs::create_post,Create pattern: parse Json, call state.db_create_*, return CREATED with payload,Adopt generic create pattern helper returning (StatusCode, ApiOk<T>)
src/handlers/api_keys.rs,list_api_keys,src/handlers/users.rs::get_users & src/handlers/posts.rs::get_posts,Listing endpoints differing only in filters & DTO mapping,Provide unified paginate_and_cache abstraction with trait for filter + fetch
src/handlers/api_keys.rs,revoke_api_key,src/handlers/users.rs::delete_user & posts/admin delete,Revocation is a specialized delete returning JSON status,Use generic revoke/delete helper with standardized response struct
src/handlers/posts.rs,paginate_posts(),src/handlers/users.rs::paginate_users,Identical structure: build Arc filters -> fetch_paginated_cached_with_filters -> map items -> count closure,Abstract into generic paginate_with(state, cache_key, filters, item_fetch_fn, count_fn)
src/handlers/users.rs,paginate_users(),src/handlers/posts.rs::paginate_posts,Same as above (symmetric),Implement generic PaginatedService trait or macro
src/utils/paginate.rs,fetch_paginated_cached_with_filters,Repeated closure construction pattern used similarly in posts/users,Could further factor filter Arc cloning logic into helper build_filtered_paginated(cache_key,...)
src/handlers/posts.rs,build_posts_cache_key,src/handlers/users.rs::build_users_cache_key & users::get_user_posts inline key,Multiple small wrappers around build_list_cache_key with manual base strings,Replace with enum CacheListKey { Posts, Users, UserPosts, PostsByTag } -> to_cache_key(base params)
src/handlers/users.rs,build_users_cache_key,src/handlers/posts.rs::build_posts_cache_key,Symmetric duplication of wrapper,See above unification via enum or generic fn build_entity_list_cache_key<Entity>
src/handlers/posts.rs,get_posts,get_posts_by_tag & users::get_user_posts,All three call paginate_posts after computing variant cache key,Provide generic function list_posts(scope: PostScope {All, Tag(tag), User(id)}) computing key internally
src/handlers/posts.rs,get_posts_by_tag,posts::get_posts & users::get_user_posts,Same pagination core differing only in base & added tag filter,Unify under PostScope enumeration
src/handlers/users.rs,get_user_posts,posts::get_posts & posts::get_posts_by_tag,Same as above with author filter,Use PostScope::User and avoid separate handler logic besides Path extraction
src/handlers/posts.rs,get_post,src/handlers/users.rs::get_user,Entity fetch with cache_or_compute + id-based cache key builder,Create generic get_cached_entity(prefix, id, loader) in a utility module
src/handlers/users.rs,get_user,src/handlers/posts.rs::get_post,Same as above (symmetric),Implement generic helper and remove per-entity duplication
src/utils/cache_key.rs,CacheKeyBuilder usage patterns,multiple handlers (posts/users/get_post/get_user),Handlers replicate pattern of CacheKeyBuilder::new(...).kv("id", id),Introduce helper fn entity_id_key(prefix, id) returning formatted string
src/handlers/auth.rs,register/login/refresh_token (response building),Auth response building duplicates mapping into LoginResponse/RefreshResponse and success flags,Encapsulate token response assembly in AuthResponseBuilder with methods for new_login() new_refresh()
src/handlers/auth.rs,LoginResponse::from,register/login mapping similar fields to struct,Mapping logic could drift if fields added; centralize via builder or derive-based transformation macro
src/handlers/auth.rs,logout/profile static JSON blocks,Multiple endpoints returning static ApiOk json skeleton,Provide helper ok_message(msg) to standardize success responses
src/handlers/posts.rs (within create/update/publish/delete),#[cfg(feature="search")] state.search_index_post_safe / remove_post_safe,Pattern replicated across user and post handlers,Wrap in generic index_entity_safe(entity_kind, action, id/data)
src/handlers/users.rs (update_user/delete_user),#[cfg(feature="search")] search_index_user_safe/remove_user_safe,Same conditional indexing pattern,Abstract as above
src/handlers/posts.rs,publish_post,update_post logic overlap (update then optional search indexing),Could reuse update_entity with a specialized UpdatePostRequest builder,Add publish_post convenience in service layer and remove handler duplication
src/handlers/metrics.rs,metrics (repeated push_str for HELP/TYPE/value triplets),Boilerplate string assembly for each metric name repeating pattern,Introduce helper write_metric(&mut out, name, mtype, help, value) or small macro metric!(out, counter, name, help, value)
src/handlers/admin.rs,require_admin_permission calls preface in multiple admin functions,Basic permission gating repeated per function,Use axum middleware/layer to enforce admin role for all /admin routes reducing per-handler duplication
src/handlers/admin.rs,list_posts vs posts::get_posts simplified recent subset,Logic overlaps in retrieving and summarizing posts (admin uses db_admin_list_recent_posts),Could unify by adding limit parameter to general list with role-based filter
src/handlers/admin.rs,uuid parse in delete_post (Uuid::parse_str) while other handlers use Path<Uuid>,Manual parse introduces inconsistency duplicating potential validation,Change route param extraction to Path<Uuid> uniformly to remove manual parsing
src/handlers/users.rs,get_user_posts vs posts::get_posts_by_tag vs posts::get_posts,Three variants differ only by additional fixed filter (author or tag),Refactor into single route with optional query parameters (author, tag) plus scope-based cache key
src/handlers/posts.rs,PostDto::from mapping,Similar mapping patterns likely exist for other DTOs (UserInfo::from etc.),Create macro derive DtoFrom(model=...) or implement TryFrom with generic helper to reduce manual field copy
src/handlers/users.rs,UserInfo::from usage mirrored by PostDto::from,Consistent manual copy fields,Adopt trait ModelDto with generic blanket impl to minimize boilerplate
src/handlers/api_keys.rs,Json(serde_json::Value) simple status response patterns,Status JSON strings appear elsewhere (delete endpoints),Introduce standard ApiStatus { status: String } struct reused across endpoints
