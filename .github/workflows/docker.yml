name: Docker

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  workflow_run:
    workflows: ['CI']
    types: [completed]

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ghcr.io/${{ github.repository_owner }}/rustcms

jobs:
  # ========================================
  # PR Build & Test (no push)
  # ========================================
  build-pr:
    name: Build & Test (${{ matrix.variant }})
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: cms
            binary: cms-server
            features: production
            no_default: false
            variant: prod
          - id: admin
            binary: admin_server
            features: dev-tools,auth,database
            no_default: false
            variant: admin
          - id: minimal
            binary: cms-server
            features: ""
            no_default: true
            variant: minimal

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Derive metadata
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ env.IMAGE_BASE }}
          tags: |
            type=ref,event=pr
            type=sha
            type=raw,value=${{ matrix.variant }}-pr-${{ github.event.pull_request.number }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0

      - name: Set up Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0

      - name: Build image
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: .
          file: Dockerfile
          push: false
          platforms: linux/amd64
          build-args: |
            FEATURES=${{ matrix.features }}
            NO_DEFAULT_FEATURES=${{ matrix.no_default }}
            BINARY=${{ matrix.binary }}
            BUILD_VARIANT=${{ matrix.variant }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.id }}-pr
          cache-to: type=gha,mode=max,scope=${{ matrix.id }}-pr

      - name: Export image
        run: |
          mkdir -p dist
          docker save ${{ fromJSON(steps.meta.outputs.json).tags[0] }} > dist/${{ matrix.variant }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: image-${{ matrix.variant }}-pr${{ github.event.pull_request.number }}
          path: dist/${{ matrix.variant }}.tar
          retention-days: 3

      - name: Trivy scan
        uses: aquasecurity/trivy-action@062f2592684a31eb3aa050cc61e7ca1451cecd3d # v0.18.0
        continue-on-error: true
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.variant }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@b611370bb5703a7efb587f9d136a52ea24c5c38c # v3.25.11
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results-${{ matrix.variant }}.sarif'

  # ========================================
  # Production Release (push to registry)
  # ========================================
  build-release:
    name: Build & Push Production
    if: >-
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main')
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Derive metadata
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ env.IMAGE_BASE }}
          tags: |
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=prod-latest,enable=${{ github.event_name == 'workflow_run' || github.ref == 'refs/heads/main' }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.title=Rust CMS
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=RustCMS

      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0

      - name: Set up Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0

      - name: Login to GHCR
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set build metadata
        id: buildmeta
        run: |
          echo "VCS_REF=$(git rev-parse --verify --short HEAD)" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Build & Push (multi-arch)
        id: build
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true
          build-args: |
            FEATURES=production
            NO_DEFAULT_FEATURES=false
            BINARY=cms-server
            BUILD_VARIANT=prod
            VCS_REF=${{ steps.buildmeta.outputs.VCS_REF }}
            BUILD_DATE=${{ steps.buildmeta.outputs.BUILD_DATE }}
            RUSTFLAGS=-C debuginfo=0 -C strip=symbols -D warnings
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=release-prod
          cache-to: type=gha,mode=max,scope=release-prod
          pull: true

      - name: Install Cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0

      - name: Sign image (keyless)
        continue-on-error: ${{ github.event_name == 'workflow_run' }}
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          DIGEST=${{ steps.build.outputs.digest }}
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '); do
            echo "Signing $tag@$DIGEST"
            cosign sign --yes $tag@$DIGEST
          done

      - name: Trivy scan (production)
        uses: aquasecurity/trivy-action@062f2592684a31eb3aa050cc61e7ca1451cecd3d # v0.18.0
        with:
          image-ref: ${{ env.IMAGE_BASE }}:latest
          format: 'sarif'
          output: 'trivy-results-prod.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@b611370bb5703a7efb587f9d136a52ea24c5c38c # v3.25.11
        if: always()
        with:
          sarif_file: 'trivy-results-prod.sarif'

      - name: Generate summary
        run: |
          echo "# 🐳 Docker Release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Tags" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
