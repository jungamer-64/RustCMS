name: Docker Release

on:
  # タグ push 時 (vX.Y.Z) に正式リリースイメージを発行
  push:
    tags: [ 'v*.*.*' ]
  # メイン CI (name: CI) が main ブランチで成功したら自動的に最新スナップショットを更新
  workflow_run:
    workflows: [ 'CI' ]
    types: [ completed ]

concurrency:
  group: docker-release-${{ github.ref || github.event.workflow_run.head_branch }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write   # cosign keyless signing

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ghcr.io/${{ github.repository_owner }}/rustcms

jobs:
  release-build:
    if: >-
      (github.event_name == 'push') ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main')
    name: Build & Push (multi-arch production)
    runs-on: ubuntu-latest
    timeout-minutes: 70
    steps:
      - name: Checkout
        # TODO: pin this action to a full commit SHA for immutability
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          fetch-depth: 0

      - name: Derive meta
        id: meta
        # TODO: pin this action to a full commit SHA for immutability
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f
        with:
          images: ${{ env.IMAGE_BASE }}
          tags: |
            type=sha
            type=raw,value=prod-latest,enable=${{ github.event_name == 'workflow_run' }}
            type=raw,value=prod-${{ github.sha }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.title=Rust CMS (production)
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=RustCMS

      - name: Set up QEMU
        # TODO: pin this action to a full commit SHA for immutability
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392

      - name: Set up Buildx
        # TODO: pin this action to a full commit SHA for immutability
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Set build metadata
        id: buildmeta
        run: |
          echo "VCS_REF=$(git rev-parse --verify --short HEAD)" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Login GHCR
        # TODO: pin this action to a full commit SHA for immutability
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (multi-arch)
        id: build
        # TODO: pin this action to a full commit SHA for immutability
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            FEATURES=production
            NO_DEFAULT_FEATURES=false
            BINARY=cms-server
            BUILD_VARIANT=prod
            VCS_REF=${{ steps.buildmeta.outputs.VCS_REF }}
            BUILD_DATE=${{ steps.buildmeta.outputs.BUILD_DATE }}
            RUSTFLAGS=-C debuginfo=0 -C strip=symbols -D warnings
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=release-prod
          cache-to: type=gha,mode=max,scope=release-prod
          pull: true
          provenance: true
          sbom: true

      - name: Cosign install
        # TODO: pin this action to a full commit SHA for immutability
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20

      - name: Sign images (keyless)
        # Make signing required for tag pushes, but non-fatal when triggered from workflow_run (CI snapshots)
        continue-on-error: ${{ github.event_name == 'workflow_run' }}
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          DIGEST=${{ steps.build.outputs.digest }}
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '); do
            echo "Signing $tag@$DIGEST";
            cosign sign --yes $tag@$DIGEST;
          done

      - name: Inspect pushed images (size & platforms)
        run: |
          set -eux
          mkdir -p build-inspect
          # iterate tags and inspect with buildx imagetools
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '); do
            echo "Inspecting $tag";
            docker buildx imagetools inspect --raw $tag > build-inspect/$(echo $tag | sed 's/[:/]/_/g').json || true
          done
          # Generate a short summary
          for f in build-inspect/*.json; do
            echo "--- $f ---";
            jq -r '"Repo: "+(.manifests[0].annotations["org.opencontainers.image.title"] // "-") +"\nPlatforms: "+([.manifests[].platform|.architecture+"/"+.os] | join(", ")) +"\nSize: "+([.manifests[].digest] | length|tostring)' $f || true;
          done

      - name: Upload image inspection reports
        # TODO: pin this action to a full commit SHA for immutability
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: docker-image-inspect
          path: build-inspect

      - name: Export digest
        run: echo "digest=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "# Docker Release" >> $GITHUB_STEP_SUMMARY
          echo "Pushed tags:" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          echo "\nDigest: ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
