name: CI

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
    paths-ignore:
      - "README.md"
      - "README_PRODUCTION.md"
      - "docs/**"
      - "**/*.md"
      - "LICENSE"
  pull_request:
    branches: [main]
    paths-ignore:
      - "README.md"
      - "README_PRODUCTION.md"
      - "docs/**"
      - "**/*.md"
      - "LICENSE"
  schedule:
    - cron: "23 3 * * *" # Security audit daily (merged from security.yml)
  # Allow manual dispatch for debugging CI changes & on-demand security/coverage runs
  workflow_dispatch: {}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write # allow future upload if adding SARIF (e.g. cargo-audit -> SARIF)

env:
  CARGO_TERM_COLOR: always
  # テストで DB が不要な場合は secrets が無くても進行させるために空文字を許容
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  BISCUIT_PRIVATE_KEY_B64: ${{ secrets.BISCUIT_PRIVATE_KEY_B64 }}
  BISCUIT_PUBLIC_KEY_B64: ${{ secrets.BISCUIT_PUBLIC_KEY_B64 }}
  # Treat all Rust warnings as errors during normal build & test too
  RUSTFLAGS: -D warnings

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      # TODO: pin this action to a full commit SHA for immutability (e.g. actions/checkout@<full-sha>)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup toolchain (stable)
        # TODO: pin this action to a full commit SHA for immutability
        uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6
        with:
          components: rustfmt, clippy

      - name: Cache (Swatinem/rust-cache)
        # TODO: pin this action to a full commit SHA for immutability
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0
        with:
          workspaces: . -> target

      - name: cargo fmt --check
        run: cargo fmt --all -- --check

      - name: cargo clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  test:
    name: Build & Test (matrix)
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: cms_test
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=5s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
        options: >-
          --health-cmd="redis-cli ping" --health-interval=5s --health-timeout=5s --health-retries=10
    strategy:
      fail-fast: false
      matrix:
        toolchain: ["1.89.0", "stable"]
        feature-set: ["default", "minimal", "no-flat"]
        include:
          - feature-set: default
            cargo-features: "--all-features"
          - feature-set: minimal
            cargo-features: "--no-default-features"
          - feature-set: no-flat
            # Preview removal of deprecated flattened auth fields (disable auth-flat-fields only)
            cargo-features: "--no-default-features --features auth,cache,compression,database,search"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup toolchain ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy

      - name: Install system deps (psql client for pg_isready, etc.)
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Cache (Swatinem/rust-cache)
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0
        with:
          workspaces: . -> target

      - name: Show cargo version
        run: cargo --version --verbose

      - name: Build (${{ matrix.feature-set }})
        run: cargo build --workspace --all-targets --locked ${{ matrix.cargo-features }}

      - name: Run migrations (default & no-flat feature-sets)
        if: "matrix.feature-set == 'default' || matrix.feature-set == 'no-flat'"
        env:
          # Use repository secrets when available. When falling back for local/debug runs,
          # avoid committing an actual password value in the workflow. Use a clearly
          # non-sensitive placeholder so this file never contains a real credential.
          DATABASE_URL: ${{ env.DATABASE_URL || 'postgres://postgres:REPLACE_ME@localhost:5432/cms_test' }}
        run: |
          set -euo pipefail
          if [ -z "${DATABASE_URL}" ]; then
            # Local/debug fallback (placeholder) - replace locally via env or CI secrets.
            export DATABASE_URL="postgres://postgres:REPLACE_ME@localhost:5432/cms_test"
          fi
          echo "Running migrations against $DATABASE_URL"
          # SECURITY: prefer running via cargo (avoids executing an unexpected binary path)
          if cargo run --bin cms-migrate -- migrate --no-seed; then
            echo "Migrations run via cargo";
          else
            echo "Fallback to pre-built binary (debug)";
            ./target/debug/cms-migrate migrate --no-seed || true
          fi

      - name: Run tests (${{ matrix.feature-set }})
        # DB を必要とするテストが失敗した場合でも他は継続させるため、明示的なリトライや --no-fail-fast を使用
        env:
          RUST_BACKTRACE: 1
        run: |
          set -euo pipefail
          if [ -z "${DATABASE_URL:-}" ]; then
            # Local/debug fallback (placeholder) - replace locally via env or CI secrets.
            export DATABASE_URL="postgres://postgres:REPLACE_ME@localhost:5432/cms_test"
          fi
          echo "DATABASE_URL=${DATABASE_URL}"
          # Wait for Postgres health (max 40s)
          for i in $(seq 1 40); do
            if pg_isready -h localhost -p 5432 -U postgres; then echo "Postgres ready"; break; fi; sleep 1;
          done || true
          # Capture exit but don't fail matrix early
          set +e
          cargo test --workspace --no-fail-fast ${{ matrix.cargo-features }} 2>&1 | tee test-output.log
          TEST_EXIT=${PIPESTATUS[0]}
          set -e
          echo "Test exit code: ${TEST_EXIT}"
          # Non-zero recorded but allow artifact upload & later jobs; fail at end for visibility
          echo "TEST_EXIT=${TEST_EXIT}" >> $GITHUB_ENV
      - name: Contract snapshot check (insta)
        if: "matrix.feature-set == 'default' || matrix.feature-set == 'no-flat'"
        env:
          FAST_KEY_TESTS: 1
        run: |
          set -e
          cargo install cargo-insta --locked || true
          cargo insta test
      - name: Upload test log
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: test-log-${{ matrix.toolchain }}-${{ matrix.feature-set }}
          path: test-output.log
          retention-days: 5

  deprecated-scan:
    name: Deprecated Auth Field Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Run deprecation scan (src-only, human)
        run: |
          bash scripts/deprecation-scan.sh --src-only --counts > deprecation_counts.csv
          echo "--- CSV counts ---"; cat deprecation_counts.csv
      - name: Run deprecation scan (JSON)
        run: |
          bash scripts/deprecation-scan.sh --src-only --json > deprecation_counts.json
          echo "--- JSON counts ---"; cat deprecation_counts.json
      - name: Upload deprecation scan artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: deprecation-scan-${{ github.sha }}
          path: |
            deprecation_counts.csv
            deprecation_counts.json
          retention-days: 10
      - name: Auto guidance (zero streak logic)
        run: |
          bash scripts/deprecation-auto-guidance.sh | tee guidance.txt
      - name: Upload guidance
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: deprecation-guidance-${{ github.sha }}
          path: guidance.txt
          retention-days: 5
      - name: Strict check (only if all counts zero)
        run: |
          # If any count non-zero, skip strict check to avoid premature failure
          if grep -q '[1-9]' deprecation_counts.json; then
            echo "Skipping strict removal check (deprecated refs still present)"; exit 0; fi
            echo "All counts zero - running strict removal gate";
          bash scripts/deprecation-strict-check.sh

  integration-tests:
    name: Integration Tests (Postgres)
    runs-on: ubuntu-latest
    needs: test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: rustcms_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6
        with:
          toolchain: stable
          components: clippy
      - name: Wait for DB
        run: sleep 10
      - name: Ensure BISCUIT keys (secrets preferred, else generate)
        run: |
          set -euo pipefail
          if [ -n "${BISCUIT_PRIVATE_KEY_B64:-}" ] && [ -n "${BISCUIT_PUBLIC_KEY_B64:-}" ]; then
            echo "BISCUIT keys present via secrets; skipping generation"
            exit 0
          fi
          echo "No BISCUIT secrets found; generating ephemeral keys"
          cargo build --bin gen_biscuit_keys --quiet
          OUT=$(./target/debug/gen_biscuit_keys)
          echo "$OUT"
          PRIV=$(echo "$OUT" | sed -n 's/^BISCUIT_PRIVATE_KEY_B64=\(.*\)$/\1/p')
          PUB=$(echo "$OUT" | sed -n 's/^BISCUIT_PUBLIC_KEY_B64=\(.*\)$/\1/p')
          if [ -z "${PRIV:-}" ] || [ -z "${PUB:-}" ]; then
            echo "Failed to generate biscuit keys" >&2; exit 1
          fi
          echo "BISCUIT_PRIVATE_KEY_B64=$PRIV" >> "$GITHUB_ENV"
          echo "BISCUIT_PUBLIC_KEY_B64=$PUB" >> "$GITHUB_ENV"
      - name: Run DB migrations for integration
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          set -euo pipefail
          cargo build --bin cms-migrate --quiet || true
          if [ -x ./target/debug/cms-migrate ]; then
            ./target/debug/cms-migrate migrate --no-seed
          else
            echo "cms-migrate binary not found; skipping migrations";
          fi
      - name: Run integration tests
        run: |
          set -euo pipefail
          echo "Using BISCUIT_PRIVATE_KEY_B64=${BISCUIT_PRIVATE_KEY_B64:-<none>}"
          echo "Using BISCUIT_PUBLIC_KEY_B64=${BISCUIT_PUBLIC_KEY_B64:-<none>}"
          cargo test --tests --color always

  # ---------------- Security Jobs (integrated from security.yml) ----------------
  cargo-deny:
    name: Security / cargo-deny
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: lint
    if: github.event_name != 'pull_request' || github.base_ref == 'main' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Cache cargo registry & index
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cargo-deny
        run: cargo install cargo-deny --locked
      - name: Run cargo-deny (advisories/licenses)
        run: cargo deny check advisories bans licenses sources sources --hide-inclusion-graph

  secrets-scan:
    name: Security / gitleaks
    runs-on: ubuntu-latest
    needs: cargo-deny
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run gitleaks detect
        run: |
          if ! command -v gitleaks >/dev/null 2>&1; then
            echo 'Installing gitleaks'; curl -sSLf https://github.com/zricethezav/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o gitleaks && chmod +x gitleaks && sudo mv gitleaks /usr/local/bin/gitleaks || true
          fi
          set -o pipefail
          # Run gitleaks and write exit code to file
          gitleaks detect --source . --report-format json --report-path gitleaks-report.json | tee gitleaks-raw.log
          echo $? > gitleaks-exitcode.txt || true
      - name: Upload gitleaks artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: |
            gitleaks-report.json
            gitleaks-raw.log
            gitleaks-exitcode.txt
      - name: Fail on leaks
        run: |
          EC=$(cat gitleaks-exitcode.txt || echo 0)
          if [ "$EC" != "0" ]; then
            echo "gitleaks detected leaks (exit code=$EC). Failing CI.";
            cat gitleaks-report.json || true;
            exit 1
          else
            echo "No leaks detected by gitleaks.";
          fi

  audit:
    name: Security / cargo-audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint
    if: github.event_name != 'pull_request' || github.base_ref == 'main' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Cache cargo registry & index
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
      - name: cargo audit (non-fatal warnings)
        run: cargo audit --deny unsound --color always || true
        # SECURITY: keep non-zero exit flexible to avoid blocking main for transient advisories; adjust policy later.

  # ---------------- Coverage Job (integrated from coverage.yml) ----------------
  coverage:
    name: Coverage (tarpaulin + Codacy)
    runs-on: ubuntu-latest
    needs: test
    if: >-
      github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    env:
      CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6
        with:
          components: rustfmt, clippy
      - name: Cache cargo & target
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-coverage-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-coverage-
      - name: Cache cargo-tarpaulin binary
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ~/.cargo/bin/cargo-tarpaulin
          key: ${{ runner.os }}-cargo-tarpaulin-v0.27.3
      - name: Install cargo-tarpaulin
        run: |
          if ! [ -f ~/.cargo/bin/cargo-tarpaulin ]; then
            cargo install cargo-tarpaulin --version 0.27.3
          fi
      - name: Generate code coverage
        run: cargo tarpaulin --verbose --workspace --out Lcov --timeout 240
      - name: Upload coverage to Codacy
        if: env.CODACY_PROJECT_TOKEN != ''
        uses: codacy/codacy-coverage-reporter-action@89d6c85cfafaec52c72b6c5e8b2878d33104c699
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: lcov.info
      - name: Upload LCOV artifact
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: lcov-report
          path: lcov.info
          retention-days: 5

  # オプション: 将来カバレッジを追加する場合のテンプレ (disabled by default)
  # coverage:
  #   name: Coverage (tarpaulin)
  #   if: false  # 有効化する場合は true または条件式に変更
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - uses: actions/checkout  # (commented example)
  #     - name: Install tarpaulin
  #       run: cargo install cargo-tarpaulin --locked
  #     - name: Run coverage
  #       run: cargo tarpaulin --workspace --timeout 240 --out Xml
  #     - name: Upload coverage artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage-report
  #         path: cobertura.xml