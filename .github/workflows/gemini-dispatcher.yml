name: ðŸ”€ Gemini Dispatcher

on:
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened]
  issues:
    types: [opened, reopened]
  issue_comment:
    types: [created]

defaults:
  run:
    shell: bash

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # ========================================
  # Debug (optional)
  # ========================================
  debug:
    if: ${{ fromJSON(vars.DEBUG || vars.ACTIONS_STEP_DEBUG || 'false') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Print context
        env:
          DEBUG_event_name: ${{ github.event_name }}
          DEBUG_event_action: ${{ github.event.action }}
          DEBUG_event_comment_association: ${{ github.event.comment.author_association }}
          DEBUG_event_issue_association: ${{ github.event.issue.author_association }}
          DEBUG_event_pr_association: ${{ github.event.pull_request.author_association }}
          DEBUG_event_review_association: ${{ github.event.review.author_association }}
        run: env | grep '^DEBUG_'

  # ========================================
  # Dispatch Logic
  # ========================================
  dispatch:
    if: >-
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.fork == false
      ) || (
        github.event.sender.type == 'User' &&
        startsWith(github.event.comment.body || github.event.review.body || github.event.issue.body, '@gemini-cli') &&
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association || github.event.review.author_association || github.event.issue.author_association)
      ) || (
        github.event_name == 'issues' &&
        contains(fromJSON('["opened", "reopened"]'), github.event.action)
      )
    runs-on: ubuntu-latest
    outputs:
      command: ${{ steps.extract_command.outputs.command }}
      request: ${{ steps.extract_command.outputs.request }}
      additional_context: ${{ steps.extract_command.outputs.additional_context }}
      issue_number: ${{ github.event.pull_request.number || github.event.issue.number }}
    steps:
      - name: Mint identity token
        id: mint_identity_token
        if: vars.APP_ID
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.0.0
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          permission-contents: read
          permission-issues: write
          permission-pull-requests: write

      - name: Extract command
        id: extract_command
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          EVENT_TYPE: ${{ github.event_name }}.${{ github.event.action }}
          REQUEST: ${{ github.event.comment.body || github.event.review.body || github.event.issue.body }}
        with:
          script: |
            const request = process.env.REQUEST;
            const eventType = process.env.EVENT_TYPE;
            core.setOutput('request', request);

            if (request.startsWith("@gemini-cli /review")) {
              core.setOutput('command', 'review');
              core.setOutput('additional_context', request.replace(/^@gemini-cli \/review/, '').trim());
            } else if (request.startsWith("@gemini-cli /triage")) {
              core.setOutput('command', 'triage');
            } else if (request.startsWith("@gemini-cli")) {
              core.setOutput('command', 'invoke');
              core.setOutput('additional_context', request.replace(/^@gemini-cli/, '').trim());
            } else if (eventType === 'pull_request.opened') {
              core.setOutput('command', 'review');
            } else if (['issues.opened', 'issues.reopened'].includes(eventType)) {
              core.setOutput('command', 'triage');
            } else {
              core.setOutput('command', 'fallthrough');
            }

      - name: Acknowledge request
        env:
          GITHUB_TOKEN: ${{ steps.mint_identity_token.outputs.token || secrets.GITHUB_TOKEN || github.token }}
          ISSUE_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number }}
          REPOSITORY: ${{ github.repository }}
        run: |
          gh issue comment "${ISSUE_NUMBER}" \
            --body "ðŸ¤– Hi @${{ github.actor }}, I'm processing your request. [Track progress](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" \
            --repo "${REPOSITORY}"

  # ========================================
  # Route to specific workflows
  # ========================================
  review:
    needs: dispatch
    if: needs.dispatch.outputs.command == 'review'
    uses: ./.github/workflows/gemini-review.yml
    permissions:
      contents: read
      id-token: write
      issues: write
      pull-requests: write
    with:
      additional_context: ${{ needs.dispatch.outputs.additional_context }}
    secrets: inherit

  triage:
    needs: dispatch
    if: needs.dispatch.outputs.command == 'triage'
    uses: ./.github/workflows/gemini-triage.yml
    permissions:
      contents: read
      id-token: write
      issues: write
      pull-requests: write
    with:
      additional_context: ${{ needs.dispatch.outputs.additional_context }}
    secrets: inherit

  invoke:
    needs: dispatch
    if: needs.dispatch.outputs.command == 'invoke'
    uses: ./.github/workflows/gemini-invoke.yml
    permissions:
      contents: read
      id-token: write
      issues: write
      pull-requests: write
    with:
      additional_context: ${{ needs.dispatch.outputs.additional_context }}
    secrets: inherit

  # ========================================
  # Fallback handler
  # ========================================
  fallthrough:
    needs: [dispatch, review, triage, invoke]
    if: always() && !cancelled() && (failure() || needs.dispatch.outputs.command == 'fallthrough')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Mint identity token
        id: mint_identity_token
        if: vars.APP_ID
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.0.0
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          permission-contents: read
          permission-issues: write
          permission-pull-requests: write

      - name: Send failure comment
        env:
          GITHUB_TOKEN: ${{ steps.mint_identity_token.outputs.token || secrets.GITHUB_TOKEN || github.token }}
          ISSUE_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number }}
          REPOSITORY: ${{ github.repository }}
        run: |
          gh issue comment "${ISSUE_NUMBER}" \
            --body "ðŸ¤– Sorry @${{ github.actor }}, I encountered an error. [View logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" \
            --repo "${REPOSITORY}"
