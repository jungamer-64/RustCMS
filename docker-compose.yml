version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: cms-postgres
    environment:
      POSTGRES_DB: production_cms
      POSTGRES_USER: cms_user
      # Set POSTGRES_PASSWORD in your environment (see .env.example)
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - cms_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cms_user -d production_cms"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: cms-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - cms_network
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /usr/share/elasticsearch/tmp

  # Redis (セッション・キャッシュ用)
  redis:
    image: redis:7-alpine
    container_name: cms-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cms_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # CMS Application
  cms-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cms-backend
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_INDEX=cms_posts
      - REDIS_URL=redis://redis:6379
      # Use environment variables for secrets (see .env.example)
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - WEBAUTHN_RP_ID=localhost
      - WEBAUTHN_RP_NAME=Production CMS
      - WEBAUTHN_ORIGIN=http://localhost:3000
      - PORT=3000
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - RUST_LOG=cms_backend=info,tower_http=info
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    networks:
      - cms_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # pgAdmin (データベース管理用 - 開発時のみ)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cms-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - cms_network
    profiles:
      - development
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/lib/pgadmin

  # Elasticsearch Head (Elasticsearch管理用 - 開発時のみ)
  elasticsearch-head:
    image: mobz/elasticsearch-head:5
    container_name: cms-es-head
    ports:
      - "9100:9100"
    networks:
      - cms_network
    profiles:
      - development
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

volumes:
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
  redis_data:
    driver: local

networks:
  cms_network:
    driver: bridge
